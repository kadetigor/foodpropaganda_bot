from services.telegram_api import send_message, delete_message, send_photo_with_buttons
from services.payments import create_checkout_session, cancel_subscription  # Import the cancel_subscription function
from utils.logger import setup_logger
from utils.message_tracker import track_message, delete_bot_messages
from config import WELCOME_IMAGE_URL
from database import get_user_status  # To check if user is a subscriber

# Set up logger
logger = setup_logger(__name__)

def handle_callback(update):
    """Handles inline button interactions."""
    callback_query = update["callback_query"]
    chat_id = callback_query["message"]["chat"]["id"]
    message_id = callback_query["message"]["message_id"]
    callback_data = callback_query["data"]

    try:
        logger.info(f"Received callback with data: {callback_data}")

        # Delete previous bot messages when user clicks a button
        delete_bot_messages(chat_id)

        # Always try to delete the message that contained the clicked button
        try:
            delete_message(chat_id, message_id)
        except Exception as e:
            logger.error(f"Error deleting message with button: {e}")

        # Check if user is subscriber for subscriber-only features
        user_status = get_user_status(chat_id)

        if callback_data == "open_fractalbio" or callback_data == "open_website":
            url = "https://www.fractalbio.ai"
            safe_url = url.replace(".", "\\.")
            msg_id = send_message(chat_id, f"üîó [–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç]({safe_url})", parse_mode="MarkdownV2")
            if msg_id:
                track_message(chat_id, msg_id)

        elif callback_data == "open_stripe":
            url = create_checkout_session(chat_id)
            if url:
                safe_url = url.replace(".", "\\.")
                msg_id = send_message(chat_id, f"üí≥ [–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É]({safe_url})", parse_mode="MarkdownV2")
                if msg_id:
                    track_message(chat_id, msg_id)
            else:
                msg_id = send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                if msg_id:
                    track_message(chat_id, msg_id)
            

        elif callback_data == "start_chat":
            msg_id = send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø digital-–î–∞—à–∞, —Ç–≤–æ–π —Ç—Ä–µ–Ω–µ—Ä. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
            # This is an AI response, so we don't track it
            # Don't track_message here as it's an AI response

        elif callback_data == "about_project":
            msg_id = send_message(chat_id, "üìå –≠—Ç–æ –º–æ–π Telegram –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å —Ñ–∏—Ç–Ω–µ—Å–æ–º –∏ –ò–ò-—Å–æ–≤–µ—Ç–∞–º–∏!")
            if msg_id:
                track_message(chat_id, msg_id)

        # New subscriber-specific buttons
        elif callback_data == "submit_report":
            if user_status == "subscriber":
                msg_id = send_message(chat_id, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç—á–µ—Ç –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ/–ø–∏—Ç–∞–Ω–∏—é –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
                if msg_id:
                    track_message(chat_id, msg_id)
            else:
                msg_id = send_message(chat_id, "‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
                if msg_id:
                    track_message(chat_id, msg_id)
        
        elif callback_data == "settings":
            if user_status == "subscriber":
                buttons = [
                    [{"text": "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "cancel_subscription"}],
                    [{"text": "–ü–æ–¥–∫–ª—é—á–∏—Ç—å FatSecret", "callback_data": "connect_fatsecret"}],
                    [{"text": "–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "callback_data": "disable_reminders"}],
                    [{"text": "–ù–∞–∑–∞–¥", "callback_data": "back_to_subscriber_menu"}]
                ]
                msg_id = send_photo_with_buttons(chat_id, WELCOME_IMAGE_URL, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", buttons)
                if msg_id:
                    track_message(chat_id, msg_id)
            else:
                msg_id = send_message(chat_id, "‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
                if msg_id:
                    track_message(chat_id, msg_id)
        
        elif callback_data == "back_to_subscriber_menu":
            show_subscriber_menu(chat_id)
        
        elif callback_data == "cancel_subscription":
            if user_status == "subscriber":
                # Get subscription ID from database and cancel it
                success = cancel_subscription(chat_id)
                
                if success:
                    msg_id = send_message(chat_id, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏–Ω—è—Ç. –ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.")
                    if msg_id:
                        track_message(chat_id, msg_id)
                    
                    # Return to settings menu
                    buttons = [
                        [{"text": "–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "callback_data": "settings"}]
                    ]
                    msg_id = send_photo_with_buttons(chat_id, WELCOME_IMAGE_URL, "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", buttons)
                    if msg_id:
                        track_message(chat_id, msg_id)
                else:
                    msg_id = send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                    if msg_id:
                        track_message(chat_id, msg_id)
            else:
                msg_id = send_message(chat_id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
                if msg_id:
                    track_message(chat_id, msg_id)
        
        elif callback_data == "connect_fatsecret":
            if user_status == "subscriber":
                msg_id = send_message(chat_id, "üîÑ –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FatSecret –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
                if msg_id:
                    track_message(chat_id, msg_id)
            else:
                msg_id = send_message(chat_id, "‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
                if msg_id:
                    track_message(chat_id, msg_id)
        
        elif callback_data == "disable_reminders":
            if user_status == "subscriber":
                msg_id = send_message(chat_id, "üîÑ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
                if msg_id:
                    track_message(chat_id, msg_id)
            else:
                msg_id = send_message(chat_id, "‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
                if msg_id:
                    track_message(chat_id, msg_id)

    except Exception as e:
        logger.error(f"ERROR in handle_callback: {e}")
        try:
            msg_id = send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            if msg_id:
                track_message(chat_id, msg_id)
        except Exception as err:
            logger.error(f"Failed to send error message: {err}")

def show_subscriber_menu(chat_id):
    """Show the subscriber menu with subscriber-specific buttons."""
    buttons = [
        [{"text": "–°–ø—Ä–æ—Å–∏—Ç—å –ò–ò", "callback_data": "start_chat"}],
        [{"text": "–°–¥–∞—Ç—å –û—Ç—á–µ—Ç", "callback_data": "submit_report"}],
        [{"text": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "settings"}]
    ]
    
    msg_id = send_photo_with_buttons(
        chat_id, 
        WELCOME_IMAGE_URL, 
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
        buttons
    )
    if msg_id:
        track_message(chat_id, msg_id)