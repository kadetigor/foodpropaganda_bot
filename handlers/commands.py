from services.telegram_api import send_message, send_photo_with_buttons
from services.payments import handle_payment, create_checkout_session  # Import payment handling
from config import WELCOME_IMAGE_URL, STRIPE_CHECKOUT_URL
from database import save_visitor, get_user_status   # Function to save users in Supabase

def handle_start(update):
    """Handles the /start command by asking for an email."""
    chat_id = update["message"]["chat"]["id"]
    text = update["message"].get("text", "")
    username = update["message"]["from"].get("username", None)  # Extracts Telegram @nickname

    print(f"üìå DEBUG: Received /start command from chat_id: {chat_id}, text: {text}")  # ‚úÖ Debugging

    if not username:
        username = f"user_{chat_id}"  # Fallback if the user has no Telegram username
    
    # Check if the user already exists in visitors or subscriptions
    user_status = get_user_status(chat_id)  # ‚úÖ Now checks both tables
    print(f"üìå DEBUG: User status from database: {user_status}")  # ‚úÖ Debugging

    if user_status is None:
        send_message(chat_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–≤–æ–π email —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return

    if "subscription_success_" in text:
        send_message(chat_id, "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
    elif "subscription_cancelled" in text:
        send_message(chat_id, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    
    # User already exists, show the menu
    buttons = [
        [{"text": "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –º–æ–∏–º –ò–ò –∫–ª–æ–Ω–æ–º", "callback_data": "start_chat"}],
        [{"text": "–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", "callback_data": "open_website"}],  # ‚úÖ Intercept URL
        [{"text": "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?", "callback_data": "about_project"}],
        [{"text": "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "callback_data": "open_stripe"}]  # ‚úÖ Intercept URL
    ]
    print("üìå DEBUG: Sending menu with buttons...")  # ‚úÖ Debugging
    send_photo_with_buttons(chat_id, WELCOME_IMAGE_URL, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π –¢–ì —á–∞—Ç-–±–æ—Ç!", buttons)


def handle_subscribe(update):  # Updated to accept full update object
    """Handles the /subscribe command."""
    chat_id = update["message"]["chat"]["id"]  # Extract chat ID
    username = update["message"]["from"].get("username", "user")  # Get username with fallback
    handle_payment(chat_id, username)  # Create and send payment link

def handle_daily_tip(chat_id):
    """Handles the /daily_tip command."""
    send_message(chat_id, "You've subscribed to daily fitness tips!")